import tensorflow as tf
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow import keras

from google.colab import drive
drive.mount('/content/drive')

import warnings
warnings.filterwarnings("ignore", category=UserWarning)

import pandas as pd
df = pd.read_excel('/content/drive/MyDrive/TransportationData/10yearrailroadaccidentincidentoverview.xlsx')

print(df.columns)

print(df.Category)

# Drop all rows where the value in column 'Category' is not '--- HAZMAT RELEASES' '--- Cars carrying hazmat' '--- Hazmat cars damaged/derailed'
df.drop(df[df['A'] < 10].index, inplace=True)

categories_to_keep = ['--- HAZMAT RELEASES', '--- Cars carrying hazmat', '--- Hazmat cars damaged/derailed', 'TOTAL ACCIDENTS/INCIDENTS 1/', 'Number of railroads included', '--- Human factor caused','--- Track caused','--- Motive power/equipment caused','--- Signal caused, all track types','-------- Signal caused, main line track','--- Miscellaneous caused','--- Collisions','-------- Collisions on main line track','--- Derailments','--- Other types, e.g., obstructions']
df = df[df['Category'].isin(categories_to_keep)]

print(df.Category)

df_copy = df.copy()
df_copy['Category'].replace({
    '--- HAZMAT RELEASES': 'Hazmat releases',
    '--- Cars carrying hazmat': 'Cars carrying hazmat',
    '--- Hazmat cars damaged/derailed': 'Hazmat cars damaged/derailed',
    'TOTAL ACCIDENTS/INCIDENTS 1/': 'Total accidents/incidents',
    '--- Human factor caused': 'Human factor caused',
    '--- Track caused': 'Track caused',
    '--- Motive power/equipment caused': 'Power/equipment caused',
    '--- Signal caused, all track types': 'Signal caused, all track types',
    '-------- Signal caused, main line track': 'Signal caused, main line track',
    '--- Miscellaneous caused': 'Miscellaneous caused',
    '--- Collisions': 'Collisions',
    '-------- Collisions on main line track': 'Collisions on main line track',
    '--- Derailments': 'Derailments',
    '--- Other types, e.g., obstructions': 'Other types, e.g., obstructions'
}, inplace=True)

df = df.fillna(0) # fill missing values with 0
