# -*- coding: utf-8 -*-
"""transportation-safety-environmental-protection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N9jePdVkMP0HTBerTmBSMV_CNk_ovDhL
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

from google.colab import drive
drive.mount('/content/drive')

import warnings
warnings.filterwarnings("ignore", category=UserWarning)

file_path = "/content/drive/MyDrive/TransportationData/10yearrailroadaccidentincidentoverview.xlsx"
df = pd.read_excel(file_path)
df = pd.read_excel('/content/drive/MyDrive/TransportationData/10yearrailroadaccidentincidentoverview.xlsx')

# Transpose the dataframe
df_transposed = df.set_index('Category').T

# Reset index and rename the columns
df_transposed.reset_index(inplace=True)
df_transposed.columns = df_transposed.columns.str.strip()
df_transposed.rename(columns={'index': 'Year'}, inplace=True)

# Extract the year and convert it to integer
df_transposed['Year'] = df_transposed['Year'].str.extract('(\d+)').astype(int)

# Define the features and the target variable
X = df_transposed[['Year']]
y1 = df_transposed['--- HAZMAT RELEASES']
y2 = df_transposed['--- Hazmat cars damaged/derailed']

# Split the data into training and testing sets for each target variable
X_train1, X_test1, y_train1, y_test1 = train_test_split(X, y1, test_size=0.2, random_state=42)
X_train2, X_test2, y_train2, y_test2 = train_test_split(X, y2, test_size=0.2, random_state=42)

# Create linear regression models and fit them to the training data for each target variable
model1 = LinearRegression()
model1.fit(X_train1, y_train1)

model2 = LinearRegression()
model2.fit(X_train2, y_train2)

# Predict the number of hazmat releases and hazmat cars damaged/derailed using the test data
y_pred1 = model1.predict(X_test1)
y_pred2 = model2.predict(X_test2)

# Calculate the mean squared error and R-squared score for each model
mse1 = mean_squared_error(y_test1, y_pred1)
r21 = r2_score(y_test1, y_pred1)
mse2 = mean_squared_error(y_test2, y_pred2)
r22 = r2_score(y_test2, y_pred2)

print("Model 1 (Hazmat Releases) evaluation:")
print("Mean squared error: ", mse1)
print("R-squared score: ", r21)
print("\nModel 2 (Hazmat Cars Damaged/Derailed) evaluation:")
print("Mean squared error: ", mse2)
print("R-squared score: ", r22)

# Predict the number of hazmat releases and hazmat cars damaged/derailed for a specific year
year = 2023
prediction1 = model1.predict(np.array([[year]]))
prediction2 = model2.predict(np.array([[year]]))
print(f"Predicted number of hazmat releases in {year}: {prediction1[0]}")
print(f"Predicted number of hazmat cars damaged/derailed in {year}: {prediction2[0]}")